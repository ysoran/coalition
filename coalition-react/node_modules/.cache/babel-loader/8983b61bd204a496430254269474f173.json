{"ast":null,"code":"import axios from 'axios';\nconst apiKey = 'kGv7AUJwebNxi1U-m1d71Ma3cFCcFApnv6tJD3lgxoc';\n\nconst degreesToRadians = degrees => {\n  var pi = Math.PI;\n  return degrees * (pi / 180);\n};\n\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  let x = degreesToRadians(lon1 - lon2) * Math.cos(degreesToRadians((lat1 + lat2) / 2));\n  let y = degreesToRadians(lat1 - lat2);\n  let dist = Math.sqrt(x * x + y * y); //* 6371000.0 earth radius to calculate real distance\n\n  return dist;\n};\n\nexport const findClosestAgency = async (address, agencyData) => {\n  let position = {};\n  let currentPosition;\n  let distance = {};\n  await axios.get(\"https://geocode.search.hereapi.com/v1/geocode?q=\" + address + \"&apiKey=\" + apiKey).then(result => {\n    if (result.data.items && result.data.items.length > 0) {\n      currentPosition = result.data.items[0].position;\n    }\n  });\n\n  for (let i = 0; i < agencyData.data.length; i++) {\n    await axios.get(\"https://geocode.search.hereapi.com/v1/geocode?q=\" + agencyData.data[i].agency_address + \"&apiKey=\" + apiKey).then(result => {\n      if (result.data.items && result.data.items.length > 0) {\n        position[agencyData.data[i].id] = result.data.items[0].position;\n      }\n    });\n  }\n\n  Object.keys(position).forEach(each => {\n    distance[each] = calculateDistance(currentPosition.lat, currentPosition.lng, position[each].lat, position[each].lng);\n  });\n  let closest = Number.MAX_SAFE_INTEGER;\n  let closestId;\n  Object.keys(distance).forEach(each => {\n    if (distance[each] < closest) {\n      closest = distance[each];\n      closestId = each;\n    }\n  });\n  return closestId;\n};","map":{"version":3,"sources":["/Users/yasarsoran/Documents/coalition-project/coalition-react/src/components/sign-up/closest-agency-finder.tsx"],"names":["axios","apiKey","degreesToRadians","degrees","pi","Math","PI","calculateDistance","lat1","lon1","lat2","lon2","x","cos","y","dist","sqrt","findClosestAgency","address","agencyData","position","currentPosition","distance","get","then","result","data","items","length","i","agency_address","id","Object","keys","forEach","each","lat","lng","closest","Number","MAX_SAFE_INTEGER","closestId"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst apiKey = 'kGv7AUJwebNxi1U-m1d71Ma3cFCcFApnv6tJD3lgxoc';\n\nconst degreesToRadians = (degrees: number) => {\n    var pi = Math.PI;\n    return degrees * (pi / 180);\n}\n\nconst calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number) => {\n    let x = degreesToRadians(lon1 - lon2) * Math.cos(degreesToRadians((lat1 + lat2) / 2));\n    let y = degreesToRadians(lat1 - lat2);\n    let dist = Math.sqrt(x * x + y * y);  //* 6371000.0 earth radius to calculate real distance\n    return dist;\n}\n\nexport const findClosestAgency = async (address: any, agencyData: any): Promise<string> => {\n    let position: any = {};\n    let currentPosition: any;\n    let distance: any = {};\n    await axios.get(\"https://geocode.search.hereapi.com/v1/geocode?q=\" + address + \"&apiKey=\" + apiKey).then((result) => {\n        if (result.data.items && result.data.items.length > 0) {\n            currentPosition = result.data.items[0].position;\n        }\n    });\n\n    for (let i = 0; i < agencyData.data.length; i++) {\n        await axios.get(\"https://geocode.search.hereapi.com/v1/geocode?q=\" + agencyData.data[i].agency_address + \"&apiKey=\" + apiKey).then((result) => {\n            if (result.data.items && result.data.items.length > 0) {\n                position[agencyData.data[i].id] = result.data.items[0].position;\n            }\n        });\n    }\n\n    Object.keys(position).forEach((each: string) => {\n        distance[each] = calculateDistance(currentPosition.lat, currentPosition.lng, position[each].lat, position[each].lng);\n    });\n\n    let closest = Number.MAX_SAFE_INTEGER;\n    let closestId: any;\n    Object.keys(distance).forEach((each: string) => {\n        if (distance[each] < closest) {\n            closest = distance[each];\n            closestId = each;\n        }\n    });\n    return closestId;\n}"]},"metadata":{},"sourceType":"module"}